# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ '**' ]
env:
  VAULT_ADDR: https://clotho.broadinstitute.org:8200
  VAULT_SERVICE_ACCOUNT_ADMIN_PATH: secret/dsde/terra/crl-test/default/service-account-admin.json
  VAULT_SERVICE_ACCOUNT_USER_PATH: secret/dsde/terra/crl-test/default/service-account-user.json
  VAULT_SERVICE_ACCOUNT_JANITOR_CLIENT_PATH: secret/dsde/terra/kernel/integration/tools/crl_janitor/client-sa
  # Where to store the retrieved service accounts credentials for Google integration tests.
  SERVICE_ACCOUNT_ADMIN_FILE: common/src/testFixtures/resources/integration_service_account_admin.json
  SERVICE_ACCOUNT_USER_FILE: common/src/testFixtures/resources/integration_service_account_user.json
  SERVICE_ACCOUNT_JANITOR_CLIENT_FILE: common/src/testFixtures/resources/integration_service_account_janitor_client.json
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Pull Vault image
        run: docker pull vault:1.1.0
      # Currently, there's no way to add capabilities to Docker actions on Git, and Vault needs IPC_LOCK to run.
      - name: Get Vault token
        id: vault-token-step
        run: |
          VAULT_TOKEN=$(docker run --rm --cap-add IPC_LOCK \
            -e "VAULT_ADDR=${VAULT_ADDR}" \
            vault:1.1.0 \
            vault write -field token \
              auth/approle/login role_id=${{ secrets.VAULT_APPROLE_ROLE_ID }} \
              secret_id=${{ secrets.VAULT_APPROLE_SECRET_ID }})
          echo ::set-output name=vault-token::$VAULT_TOKEN
          echo ::add-mask::$VAULT_TOKEN
      - name: Get service account credentials from Vault
        id: vault-secret-step
        run: |
          docker run --rm --cap-add IPC_LOCK \
            -e "VAULT_TOKEN=${{ steps.vault-token-step.outputs.vault-token }}" \
            -e "VAULT_ADDR=${VAULT_ADDR}" \
            vault:1.1.0 \
            vault read -format json $VAULT_SERVICE_ACCOUNT_ADMIN_PATH \
            | jq .data > $SERVICE_ACCOUNT_ADMIN_FILE &&#
          docker run --rm --cap-add IPC_LOCK \
            -e "VAULT_TOKEN=${{ steps.vault-token-step.outputs.vault-token }}" \
            -e "VAULT_ADDR=${VAULT_ADDR}" \
            vault:1.1.0 \
            vault read -format json $VAULT_SERVICE_ACCOUNT_USER_PATH \
            | jq .data > $SERVICE_ACCOUNT_USER_FILE &&#
          docker run --rm --cap-add IPC_LOCK \
            -e "VAULT_TOKEN=${{ steps.vault-token-step.outputs.vault-token }}" \
            -e "VAULT_ADDR=${VAULT_ADDR}" \
            vault:1.1.0 \
            vault read -format json $VAULT_SERVICE_ACCOUNT_JANITOR_CLIENT_PATH \
            | jq -r .data.key | base64 -d > $SERVICE_ACCOUNT_JANITOR_CLIENT_FILE \
            | jq .data > SERVICE_ACCOUNT_JANITOR_CLIENT_FILE
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build -x minniekenny # skip minniekenny
      # TODO(CA-814): Determine how to run tests based on modified packages.
      - name: Test
        id: unit-test
        run: ./gradlew test -x minniekenny
      - name: Integration Test
        id: integration-test
        run: ./gradlew integrationTest
      - name: Upload Test Reports
        if: steps.unit-test.outputs.status == 'failure' || steps.integration-test.outputs.status == 'failure'
        uses: actions/upload-artifact@v1
        with:
          name: Test Reports
          path: |
            **/build/reports/tests

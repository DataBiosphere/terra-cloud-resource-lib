plugins {
    id 'idea'
    id 'java-library'
    id 'java-test-fixtures'
    id 'maven-publish'

    id 'com.github.ben-manes.versions' version '0.33.0'
    id 'com.diffplug.gradle.spotless' version '3.27.2'
    id 'com.jfrog.artifactory' version '4.13.0'
    id 'org.openapi.generator' version '4.3.1'
}

subprojects { subproject ->
    group = 'bio.terra.cloud-resource-lib'
    sourceCompatibility = JavaVersion.VERSION_1_8

    repositories {
        mavenCentral()
        google()
        maven {
            url 'https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot-local/'
        }
    }

    apply plugin: 'idea'
    apply plugin: 'java-library'
    apply plugin: 'java-test-fixtures'
    apply plugin: 'com.diffplug.gradle.spotless'

    configurations {
        testImplementation.extendsFrom testFixturesImplementation
    }

    dependencies {
        api group: 'com.google.auth', name: 'google-auth-library-oauth2-http', version: '0.20.0'
        api group: 'com.google.cloud', name: 'google-cloud-core-http', version: '1.93.5'

        implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.28'
        annotationProcessor group: 'com.google.auto.value', name: 'auto-value', version: '1.7.3'
        implementation group: 'com.google.auto.value', name: 'auto-value-annotations', version: '1.7.3'
        implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
        api group: 'com.google.guava', name: 'guava', version: '29.0-jre'

        implementation group: 'bio.terra', name: 'terra-resource-janitor-client', version: '0.3.0-SNAPSHOT'

        testFixturesImplementation group: 'junit', name: 'junit', version: '4.13'
        testFixturesImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.2'
        testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.+'
        testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30' // For simple logging during testing
        testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
        testImplementation group: 'org.glassfish.jersey.core', name: 'jersey-client', version: "2.31"
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.6.2'

        testImplementation(testFixtures(project(':common')))
    }

    dependencyLocking {
        lockAllConfigurations() // see https://docs.gradle.org/current/userguide/dependency_locking.html
    }

    processTestResources {
        // Include common/testFixtures/resources for integration test credentials.
        from("${project(':common:').projectDir}/testFixtures/resources")
    }

    // Linter
    spotless {
        java {
            googleJavaFormat()
            targetExclude "${buildDir}/**"
        }
    }

    build.dependsOn spotlessApply

    // Modify the standard :test task to only include unit-tagged tests.
    test {
        useJUnitPlatform {
            includeTags 'unit'
        }
    }

    // Create a new :integrationTest task to run integration tests. This won't be executed as
    // part of the standard `./gradlew build` invocation.
    task integrationTest(type: Test) {
        useJUnitPlatform {
            includeTags "integration"
        }
        shouldRunAfter test
    }

    java {
        // Builds Javadoc into the published package as part of the 'assemble' task.
        withJavadocJar()
        // Builds sources into the published package as part of the 'assemble' task.
        withSourcesJar()
    }

    task minniekenny(type: Exec) {
        commandLine 'sh', '../minnie-kenny.sh'
    }

    test.dependsOn minniekenny

    publishing {
        publications {
            "$subproject.name"(MavenPublication) {
                groupId subproject.group
                artifactId subproject.name
                version subproject.version
                from components.java
                suppressPomMetadataWarningsFor('testFixturesApiElements')
                suppressPomMetadataWarningsFor('testFixturesApiRuntimeElements')
            }
        }
    }
}

def artifactory_repo_key = System.getenv("ARTIFACTORY_REPO_KEY") != null ? System.getenv("ARTIFACTORY_REPO_KEY") : 'libs-snapshot-local'
def artifactory_username = System.getenv('ARTIFACTORY_USERNAME')
def artifactory_password = System.getenv('ARTIFACTORY_PASSWORD')

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(artifactoryPublish) &&
            (artifactory_username == null || artifactory_password == null)) {
        throw new GradleException("Set env vars ARTIFACTORY_USERNAME and ARTIFACTORY_PASSWORD to publish")
    }
}

artifactory {
    publish {
        contextUrl = 'https://broadinstitute.jfrog.io/broadinstitute/'
        repository {
            repoKey = "${artifactory_repo_key}"
            username = "${artifactory_username}"
            password = "${artifactory_password}"
        }
        defaults {
            publications(
                    'cloud-resource-schema',
                    'common',
                    'google-api-services-common',
                    'google-bigquery',
                    'google-billing',
                    'google-cloudresourcemanager',
                    'google-compute',
                    'google-dns',
                    'google-iam',
                    'google-notebooks',
                    'google-serviceusage',
                    'google-storage')
        }
    }
}
